#!/usr/bin/env python
#
# haskell build/etc wrapper for cabal or non-cabal (ghc with obj/ dir)
# - note this has very little (but non-zero still) use now that cabal-install
#   exists
#
#
# cabal is more standard for packaging
# non-cabal is faster for development work on an executable (non-library)
#
# non-cabal mode can read a 'name' file for the name of your executable which
# is produced from src/<name>.hs.  it will assume name = 'Main' otherwise

from optparse import OptionParser
import cmd_util as cu
import os
import sys

usage = """usage: %prog [options] [-- <args for run, or configure, or build>]

configure/build/install your program with cabal (by default)
or build/run program or test suite with ghc
(assuming src/ structure and other things)"""
p = OptionParser(usage)
# todo: support clean for gen?, support test for cabal
# fixme: too many non-obviousities,
#   like that optimize with cabal only applies to configure?
#   or should you know that (we could at least warn)
p.add_option('-b', '--build',     action='store_true')
p.add_option('-c', '--configure', action='store_true')
p.add_option('-C', '--cabal',     action='store_true')
#p.add_option('-H', '--haddock',   action='store_true')
p.add_option('-k', '--clean',     action='store_true')
p.add_option('-i', '--install',   action='store_true')
p.add_option('-O', '--optimize',  action='store_true')
p.add_option('-2', '--optimize2', action='store_true')
p.add_option('-r', '--run',       action='store_true')
p.add_option('-t', '--test',      action='store_true')
(opts, args) = p.parse_args()

#steps_poss = ['clean', 'configure', 'build', 'install', 'run', 'haddock']
steps_poss = ['clean', 'configure', 'build', 'install', 'run']
steps = []
for step in steps_poss:
    if getattr(opts, step):
        steps.append(step)
if not steps:
    if opts.test:
        # common case for test is to build the test then run the test
        steps = ['build', 'run']
    else:
        # in most common case we just want to install some normal cabal package
        steps = ['configure', 'build', 'install']
        opts.cabal = True
        if not opts.optimize:
            # this if is so that 'hsb -O' works as expected (and not as
            # 'hsb -2' which is the default); no reason not to support that
            opts.optimize2 = True

if opts.cabal:
    if opts.test:
        cu.error_out('testing thru cabal not supported')

    setup = 'Setup.lhs'
    if not os.path.exists(setup):
        setup = 'Setup.hs'

    for step in steps:
        if step == 'run':
            continue
        cmd = ['runhaskell', setup, step]
        if step == 'configure':
            if opts.optimize:
                cmd += ['-O']
            if opts.optimize2:
                cmd += ['--ghc-options=-O2']
            if 'run' not in steps:
                # configure is most useful step to take extra args in cabal case
                # if we aren't running
                cmd += args
        elif step == 'install':
            cmd = ['sudo'] + cmd
        cu.cmd_wait(cmd)
else:
    if 'configure' in steps:
        cu.error_out('configuring thru non-cabal not supported')
    if opts.clean:
        cu.error_out('cleaning thru non-cabal not supported')

    if os.path.exists('name'):
        name = file('name').readlines()[0][:-1]
    else:
        cabal_suffix = '.cabal'
        cabal_files = \
            [f for f in os.listdir(os.curdir) if f.endswith(cabal_suffix)]
        if len(cabal_files) == 1:
            name = cabal_files[0][:-len(cabal_suffix)]
        else:
            name = 'Main'
    if opts.test:
        if 'install' in steps:
            cu.error_out('installing test not supported')

        name += '.Check'
    if 'build' in steps:
        if not os.path.exists('obj'):
            os.mkdir('obj')
        cmd = ['ghc', '-threaded', '--make', '-odir', 'obj', '-hidir', 'obj',
            'src/Main.hs', '-o', name]
        if opts.optimize:
            cmd += ['-O']
        if opts.optimize2:
            cmd += ['-O2']
        if 'run' not in steps:
            # build is most useful step to take extra args in non-cabal case
            # if we aren't running
            cmd += args
        cu.cmd_wait(cmd)
    if 'install' in steps:
        cu.cmd_wait(['sudo', 'cp', name, '/usr/local/bin'])

if 'run' in steps:
    if opts.cabal:
        name_cmd = 'grep executable *.cabal | head -n1 | awk \'{print $2}\''
        name = cu.cmd_output(name_cmd)[0]
    else:
        name = './' + name
    print >> sys.stdout, 'running'
    cu.cmd_wait([name] + args)

#if 'haddock' in steps:
#
